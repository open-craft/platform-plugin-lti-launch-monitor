[build-system]
requires = ["hatchling", "hatch-requirements-txt"]
build-backend = "hatchling.build"

[project]
name = "lti-launch-monitor"
dynamic = ["version", "dependencies", "optional-dependencies"]
description = "Monitors LTI launches and records them for analytics."
readme = "README.rst"
license-file = "LICENSE.txt"
requires-python = ">=3.11"
authors = [
    { name = "OpenCraft", email = "help@opencraft.com" },
]
keywords = [
    "Python",
    "edx",
    "openedx",
    "platform-plugin",
    "lti",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Framework :: Django",
    "Framework :: Django :: 4.2",
    "Framework :: Django :: 5.2",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

[project.urls]
Homepage = "https://github.com/open-craft/platform-plugin-lti-launch-monitor"

[tool.hatch.version]
path = "lti_launch_monitor/__init__.py"

[tool.hatch.build.targets.wheel]
packages = [
    "/lti_launch_monitor",
]

[tool.hatch.metadata.hooks.requirements_txt]
files = ["requirements/base.txt"]

[tool.hatch.metadata.hooks.requirements_txt.optional-dependencies]
docs = ["requirements/doc.txt"]
quality = ["requirements/quality.txt"]
test = ["requirements/test.txt"]

[tool.isort]
include_trailing_comma = true
indent = '    '
line_length = 120
multi_line_output = 3
skip = "migrations"

[tool.doc8]
# D001 = Line too long
ignore = "D001"

[tool.pydocstyle]
# D101 = Missing docstring in public class
# D200 = One-line docstring should fit on one line with quotes
# D203 = 1 blank line required before class docstring
# D212 = Multi-line docstring summary should start at the first line
# D215 = Section underline is over-indented (numpy style)
# D404 = First word of the docstring should not be This (numpy style)
# D405 = Section name should be properly capitalized (numpy style)
# D406 = Section name should end with a newline (numpy style)
# D407 = Missing dashed underline after section (numpy style)
# D408 = Section underline should be in the line following the section's name (numpy style)
# D409 = Section underline should match the length of its name (numpy style)
# D410 = Missing blank line after section (numpy style)
# D411 = Missing blank line before section (numpy style)
# D412 = No blank lines allowed between a section header and its content (numpy style)
# D413 = Missing blank line after last section (numpy style)
# D414 = Section has no content (numpy style)
ignore = "D101,D200,D203,D212,D215,D404,D405,D406,D407,D408,D409,D410,D411,D412,D413,D414"
match-dir = "(?!migrations)"


[project.entry-points."lms.djangoapp"]
lti_launch_monitor = "lti_launch_monitor.apps:LtiLaunchMonitorConfig"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.envs.default]
installer = "uv"

[tool.hatch.envs.quality]
features = [
    "quality",
]

[tool.hatch.envs.quality.scripts]
check = [
    "touch tests/__init__.py",
    "pylint lti_launch_monitor tests manage.py",
    "rm tests/__init__.py",
    "pycodestyle lti_launch_monitor tests manage.py",
    "pydocstyle lti_launch_monitor tests manage.py",
    "isort --check-only --diff tests lti_launch_monitor manage.py test_settings.py",
    "make selfcheck",
]

[tool.hatch.envs.docs]
features = [
    "docs",
]

[tool.hatch.envs.docs.env-vars]
DJANGO_SETTINGS_MODULE = "test_settings"
# Adding the option here instead of as a default in the docs Makefile because that Makefile is generated by shpinx.
SPHINXOPTS = "-W"

[tool.hatch.envs.docs.scripts]
build = [
    "doc8 --ignore-path docs/_build README.rst docs",
    "rm -f docs/lti_launch_monitor.rst",
    "rm -f docs/modules.rst",
    "make -e -C docs clean",
    "make -e -C docs html",
    "python -m build --wheel",
    "twine check dist/*",
]


[tool.hatch.envs.test]
detached = true
features = [
    "test",
]

[tool.hatch.envs.test.env-vars]
DJANGO_SETTINGS_MODULE = "test_settings"
# Adding the option here instead of as a default in the docs Makefile because that Makefile is generated by shpinx.
SPHINXOPTS = "-W"

[[tool.hatch.envs.test.matrix]]
python = ["311", "312"]
django = ["4", "5"]

[tool.hatch.envs.test.overrides]
matrix.django.dependencies = [
    { value = "Django>=4.0,<5.0", if = ["4"] },
    { value = "Django>=5.0,<6.0", if = ["5"] },
]

[tool.hatch.envs.test.scripts]
test = [
    "python manage.py check",
    "pytest --cov lti_launch_monitor --cov tests --cov-report term-missing --cov-report xml",
]
coverage = [
    "pytest --cov-report html",
]


[tool.hatch.envs.requirements]
detached = true
dependencies = [
    "pip <= 24.2",
    "pip-tools",
]

[tool.hatch.envs.requirements.env-vars]
#PIP_COMPILE = "pip-compile {env:PIP_COMPILE_OPTS:}"

[tool.hatch.envs.requirements.scripts]
compile = [
    "pip-compile {env:PIP_COMPILE_OPTS:} -o requirements/base.txt requirements/base.in",
    "pip-compile {env:PIP_COMPILE_OPTS:} -o requirements/test.txt requirements/test.in",
    "pip-compile {env:PIP_COMPILE_OPTS:} -o requirements/doc.txt requirements/doc.in",
    "pip-compile {env:PIP_COMPILE_OPTS:} -o requirements/quality.txt requirements/quality.in",
    "pip-compile {env:PIP_COMPILE_OPTS:} -o requirements/dev.txt requirements/dev.in",
    # Let tox control the Django version for tests
    "sed '/^[dD]jango==/d' requirements/test.txt > requirements/test.tmp",
    "mv requirements/test.tmp requirements/test.txt",
]
upgrade = [
    "PIP_COMPILE_OPTS=--upgrade hatch run requirements:compile"
]
